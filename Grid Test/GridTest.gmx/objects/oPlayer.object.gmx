<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>xDestination = x
yDestination = y
direction = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//How fast does the oPlayer move?

characterSpeed = 8

//Redefining the next destination of oPlayer when input is detected.
//Also restricts oPlayer from moving in the opposite of their current direction

if(x = xDestination) and (y = yDestination) and keyboard_check(ord('D')) and (direction != 1){
    xDestination = xDestination + 64;
    image_angle = 0;
    direction = 2;
}

if(x = xDestination) and (y = yDestination) and keyboard_check(ord('A')) and (direction != 2){
    xDestination = xDestination - 64;
    image_angle = 180;
    direction = 1;
}
    
if(x = xDestination) and (y = yDestination) and keyboard_check(ord('W')) and (direction != 4) {
    yDestination = yDestination - 64;
    image_angle = 90;
    direction = 3;
}
    
if(x = xDestination) and (y = yDestination) and keyboard_check(ord('S')) and (direction != 3) {
    yDestination = yDestination + 64;
    image_angle = 270;
    direction = 4;
}

//Moving oPlayer to the next destination

if (y &gt; yDestination) {
    y = y - characterSpeed;
}
if (x &lt; xDestination) {
    x = x + characterSpeed;
}
if (y &lt; yDestination) {
    y = y + characterSpeed;
}
if (x &gt; xDestination) {
    x = x - characterSpeed;
}

//oPlayer will keep going in their current direction unless another input is detected when they reach their next destination

if (x = xDestination and y = yDestination) {
    if (direction = 1 and ((keyboard_check(vk_nokey)) or keyboard_check(ord('D'))))  {
        xDestination = xDestination - 64;
    }else if (direction = 2 and ((keyboard_check(vk_nokey))or keyboard_check(ord('A')))){
        xDestination = xDestination + 64;
    }else if (direction = 3 and ((keyboard_check(vk_nokey))or keyboard_check(ord('S')))){
        yDestination = yDestination - 64;
    }else if (direction = 4 and ((keyboard_check(vk_nokey))or keyboard_check(ord('W')))){
        yDestination = yDestination + 64;
    }
}

//bounce player back into the room if they reach the edge

if (x&lt;(room_width-room_width)){
    xDestination = 32;
    image_angle = 0;
    direction = 2;
}

if (x&gt;(room_width)){
    xDestination = room_width - 32;
    image_angle = 180;
    direction = 1;
}

if (y&lt;(room_height-room_height)){
    yDestination = 32;
    image_angle = 270;
    direction = 4;
}

if (y&gt;(room_height)){
    yDestination = room_height - 32;
    image_angle = 90;
    direction = 3;
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
